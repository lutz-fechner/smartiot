@page "/fanController"

@using FanControl.Data
@using FanControl.Model
@inject FanService Svc

<div class="jumbotron">
    <h1>
        Fan Control
        @if(busy)
        {
            <div class="spinner-border text-warning" style="margin-bottom:5px;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
    </h1>
    
    <h3>@FanUrl</h3>
        
    

    

    <div class="progress" style="margin-top:10px;margin-bottom:10px;">
        <div class="progress-bar" role="progressbar" style="width: @Svc.getCurrentValueForUrl(this.FanUrl)%" aria-valuemin="0" aria-valuemax="100"></div>
    </div>

    <p>Last State:@Svc.getLastState(this.FanUrl)  </p>
    <p>Current Percent:@Svc.getCurrentValueForUrl(this.FanUrl)  </p>

    <button class="btn btn-primary" @onclick="@Decrement"> slower</button>
    <button class="btn btn-primary" @onclick="Increment"> faster</button>
    <br /><br />
    <div class="btn-group" role="group" aria-label="Fan Speeds">
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(0)">0</button>
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(20)">20</button>
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(40)">40</button>
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(60)">60</button>
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(80)">80</button>
        <button class="btn btn-primary" @onclick="(e) =>  SetTo(100)">100</button>
    </div>
</div>

@code {

    [Parameter]
    public string FanUrl { get; set; } = "";

    [Parameter]
    public int MotorOffset { get; set; } = 0;

    [Parameter]
    public int FanFactor { get; set; } = 0;

    [Parameter]
    public int FanCount { get; set; } = 0;

    public bool busy { get; set; } = false;

    private Fan fan;

    private void makeBusy()
    {
        busy = true;
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Fan URL is: " + this.FanUrl);

        fan = Svc.GetFanByUrl(this.FanUrl);
        fan.MotorOneBrake = this.MotorOffset;
        fan.FanFactor = this.FanFactor;
        fan.FanCount = this.FanCount;
    }


    public async Task Increment()
    {
        busy = true;
        await Task.Delay(1);  

        Svc.Increment(this.FanUrl);

        await Task.Delay(1);  
        busy = false;
    }

    public async Task Decrement()
    {
        busy = true;
        await Task.Delay(1);  
        
        Svc.Decrement(this.FanUrl);
        
        busy = false;
        await Task.Delay(1);  
    }

    public async Task SetTo(int newSpeed)
    {
        busy = true;
        await Task.Delay(1);  

        Svc.SetToSpeed(this.FanUrl, newSpeed);

        busy = false;
        await Task.Delay(1);  

        
    }
}


